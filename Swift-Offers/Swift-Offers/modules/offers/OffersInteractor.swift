//
//  OffersInteractor.swift
//  Swift-Offers
//
//  Created by Chris Allinson on 2018-07-13.
//  Copyright (c) 2018 Chris Allinson. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


protocol OffersBusinessLogic {
    func loadOffers(request: Offers.LoadOffers.Request)
    func filterOffers(request: Offers.FilterOffers.Request)
    func sortOffers(request: Offers.SortOffers.Request)
}

protocol OffersDataStore {
    var offers: [Offer] { get set }
    var filteredOffers: [Offer] { get set }
}


// MARK: -

class OffersInteractor: OffersDataStore {
    
    // MARK: instance variables
    
    var presenter: OffersPresentationLogic?
    var worker: OffersWorker?
    
    var offers: [Offer] = []
    var filteredOffers: [Offer] = []
}


// MARK: -

extension OffersInteractor: OffersBusinessLogic {
    
    // MARK: OffersBusinessLogic
    
    func loadOffers(request: Offers.LoadOffers.Request) {
        worker = OffersWorker()
        worker?.fetchOffers() { offers, error in
            if offers != nil {
                self.offers = offers!
            }
            
            let response = Offers.LoadOffers.Response(
                offers: offers,
                error: error
            )
            self.presenter?.presentOffers(response: response)
        }
    }
    
    func filterOffers(request: Offers.FilterOffers.Request) {
        worker = OffersWorker()
        worker?.filterOffers(offers: offers, filterOptions: request.filterOptions) { offers in
            self.filteredOffers = offers
            
            let tempResponse = Offers.FilterOffers.Response(
                offers: offers,
                error: nil
            )
            self.presenter?.presentFilteredOffers(response: tempResponse)
        }
    }
    
    func sortOffers(request: Offers.SortOffers.Request) {
        worker = OffersWorker()
        worker?.sortOffers(offers: filteredOffers, sortOptions: request.sortOptions) { offers in
            self.filteredOffers = offers
            
            let tempResponse = Offers.SortOffers.Response(
                offers: offers,
                error: nil
            )
            self.presenter?.presentSortedOffers(response: tempResponse)
        }
    }
}
